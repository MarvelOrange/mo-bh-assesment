name: Terraform Plan

on:
  workflow_dispatch:
    inputs:
      environment:
        description: Enter environment name
        required: true
        default: "none"
      terraform_version:
        required: false
        description: "Enter version of Terraform to use"
        default: "1.6.6"

jobs:
  plan:
    name: terraform plan
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    steps:
      # Check out Repo
      - uses: actions/checkout@v4

      # Set up Terraform
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform_version }}

      - name: Load environment specific configurations
        id: load_config
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const configPath = './terraform/config/pipeline.json';
            const environment = "${{ inputs.environment }}";
            const defaults = {
              aws_region: "${{ inputs.aws_region }}",
              code_owner: "${{ inputs.code_owner }}",
              state_bucket: "${{ inputs.state_bucket }}",
              state_bucket_region: "${{ inputs.state_bucket_region }}"
            };
            let config = {};
            if (fs.existsSync(configPath)) {
              const fullConfig = JSON.parse(fs.readFileSync(configPath, 'utf8'));
              if (!fullConfig[environment]) {
                core.setFailed(`No configuration found for environment '${environment}'.`);
              } else if (!fullConfig[environment].account_id) {
                core.setFailed(`'account_id' is not defined in the configuration for environment '${environment}'.`);
              } else {
                config = { ...defaults, ...fullConfig[environment] }; // Merge defaults with environment-specific config
              }
            } else {
              core.setFailed(`Configuration file not found at '${configPath}'.`);
            }
            for (const key in config) {
              if (config[key]) {
                core.setOutput(key, config[key]);
                console.log(`Set ${key}: ${config[key]}`);
              }
            }

      # Authenticate via OIDC to AWS
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ steps.load_config.outputs.aws_region }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}